{"name": "test_02", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: [Errno Expecting value] /*fgg_again*/phone({\"meta\":{\"result\":\"0\",\"result_info\":\"\",\"jump_url\":\"\"},\"data\":{\"operator\":\"电信\",\"area\":\"广东\",\"area_operator\":\"广东电信\",\"support_price\":{\"10000\":\"9995\",\"20000\":\"19990\",\"3000\":\"2998\",\"30000\":\"29985\",\"5000\":\"4998\",\"50000\":\"49974\"},\"promotion_info\":null}}): 0", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nvenv\\lib\\site-packages\\requests\\models.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '/*fgg_again*/phone({\"meta\":{\"result\":\"0\",\"result_info\":\"\",\"jump_url\":\"\"},\"data\":{\"operator\":\"电信\",\"area\":\"广东\",\"area_op...:{\"10000\":\"9995\",\"20000\":\"19990\",\"3000\":\"2998\",\"30000\":\"29985\",\"5000\":\"4998\",\"50000\":\"49974\"},\"promotion_info\":null}})'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n    \n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError('the JSON object must be str, bytes or bytearray, '\n                                'not {!r}'.format(s.__class__.__name__))\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nD:\\Python\\lib\\json\\__init__.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002114C47F080>\ns = '/*fgg_again*/phone({\"meta\":{\"result\":\"0\",\"result_info\":\"\",\"jump_url\":\"\"},\"data\":{\"operator\":\"电信\",\"area\":\"广东\",\"area_op...:{\"10000\":\"9995\",\"20000\":\"19990\",\"3000\":\"2998\",\"30000\":\"29985\",\"5000\":\"4998\",\"50000\":\"49974\"},\"promotion_info\":null}})'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x000002114C3EBCF0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nD:\\Python\\lib\\json\\decoder.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002114C47F080>\ns = '/*fgg_again*/phone({\"meta\":{\"result\":\"0\",\"result_info\":\"\",\"jump_url\":\"\"},\"data\":{\"operator\":\"电信\",\"area\":\"广东\",\"area_op...:{\"10000\":\"9995\",\"20000\":\"19990\",\"3000\":\"2998\",\"30000\":\"29985\",\"5000\":\"4998\",\"50000\":\"49974\"},\"promotion_info\":null}})'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Python\\lib\\json\\decoder.py:357: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_request.Test_case object at 0x000002114C6C5F60>\n\n    def test_02(self):\n        url02 = \"https://www.baifubao.com/callback?cmd=1059&callback=phone&phone=18026222429\"\n        data02 = {}\n        rep02 = requests.get(url=url02)\n>       print(rep02.json())\n\ntestcases\\test_request.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            if is_py2: # e is a ValueError\n                raise RequestsJSONDecodeError(e.message)\n            else:\n>               raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE               requests.exceptions.JSONDecodeError: [Errno Expecting value] /*fgg_again*/phone({\"meta\":{\"result\":\"0\",\"result_info\":\"\",\"jump_url\":\"\"},\"data\":{\"operator\":\"电信\",\"area\":\"广东\",\"area_operator\":\"广东电信\",\"support_price\":{\"10000\":\"9995\",\"20000\":\"19990\",\"3000\":\"2998\",\"30000\":\"29985\",\"5000\":\"4998\",\"50000\":\"49974\"},\"promotion_info\":null}}): 0\n\nvenv\\lib\\site-packages\\requests\\models.py:917: JSONDecodeError"}, "start": 1653618881247, "stop": 1653618881898, "uuid": "838be130-9864-493f-a60d-56813100535a", "historyId": "4d0a09f709ef7c26a84fbb17c6036076", "testCaseId": "57f246f05d1c599e5949f24a9728ed65", "fullName": "testcases.test_request.Test_case#test_02", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "Test_case"}, {"name": "host", "value": "weiqiangchen"}, {"name": "thread", "value": "15936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_request"}]}