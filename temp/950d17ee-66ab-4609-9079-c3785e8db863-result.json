{"name": "test_02", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'header'", "trace": "self = <test_request.Test_case object at 0x0000024920F75BA8>\nconn_qianhouzhi = None\n\n    def test_02(self,conn_qianhouzhi):\n        url02 = \"http://172.16.0.181:8508/pwrApi/infoscreen/pdeScreen/list\"\n        data02 = {\n            \"projectId\":\"2c92808e80f408230180f4a9e28d04c8\"\n        }\n        header = {\n            \"userToken\":\"3d42dfd2540171e3908fc9ba8d7291a6\",\n            \"Content-Type\":\"application/json; charset=UTF-8\"\n        }\n>       rep02 = requests.get(url02,data02,header = header)\n\ntestcases\\test_request.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\requests\\api.py:75: in get\n    return request('get', url, params=params, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'get'\nurl = 'http://172.16.0.181:8508/pwrApi/infoscreen/pdeScreen/list'\nkwargs = {'header': {'Content-Type': 'application/json; charset=UTF-8', 'userToken': '3d42dfd2540171e3908fc9ba8d7291a6'}, 'params': {'projectId': '2c92808e80f408230180f4a9e28d04c8'}}\nsession = <requests.sessions.Session object at 0x0000024921E993C8>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'header'\n\nvenv\\lib\\site-packages\\requests\\api.py:61: TypeError"}, "start": 1653620158556, "stop": 1653620158556, "uuid": "0cf4fc6d-932b-4704-abb9-ca491c9423fb", "historyId": "4d0a09f709ef7c26a84fbb17c6036076", "testCaseId": "57f246f05d1c599e5949f24a9728ed65", "fullName": "testcases.test_request.Test_case#test_02", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "Test_case"}, {"name": "host", "value": "weiqiangchen"}, {"name": "thread", "value": "11104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_request"}]}